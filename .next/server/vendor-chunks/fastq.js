"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fastq";
exports.ids = ["vendor-chunks/fastq"];
exports.modules = {

/***/ "(rsc)/./node_modules/fastq/queue.js":
/*!*************************************!*\
  !*** ./node_modules/fastq/queue.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/* eslint-disable no-var */ var reusify = __webpack_require__(/*! reusify */ \"(rsc)/./node_modules/reusify/reusify.js\");\nfunction fastqueue(context, worker, concurrency) {\n    if (typeof context === \"function\") {\n        concurrency = worker;\n        worker = context;\n        context = null;\n    }\n    if (concurrency < 1) {\n        throw new Error(\"fastqueue concurrency must be greater than 1\");\n    }\n    var cache = reusify(Task);\n    var queueHead = null;\n    var queueTail = null;\n    var _running = 0;\n    var errorHandler = null;\n    var self = {\n        push: push,\n        drain: noop,\n        saturated: noop,\n        pause: pause,\n        paused: false,\n        concurrency: concurrency,\n        running: running,\n        resume: resume,\n        idle: idle,\n        length: length,\n        getQueue: getQueue,\n        unshift: unshift,\n        empty: noop,\n        kill: kill,\n        killAndDrain: killAndDrain,\n        error: error\n    };\n    return self;\n    function running() {\n        return _running;\n    }\n    function pause() {\n        self.paused = true;\n    }\n    function length() {\n        var current = queueHead;\n        var counter = 0;\n        while(current){\n            current = current.next;\n            counter++;\n        }\n        return counter;\n    }\n    function getQueue() {\n        var current = queueHead;\n        var tasks = [];\n        while(current){\n            tasks.push(current.value);\n            current = current.next;\n        }\n        return tasks;\n    }\n    function resume() {\n        if (!self.paused) return;\n        self.paused = false;\n        for(var i = 0; i < self.concurrency; i++){\n            _running++;\n            release();\n        }\n    }\n    function idle() {\n        return _running === 0 && self.length() === 0;\n    }\n    function push(value, done) {\n        var current = cache.get();\n        current.context = context;\n        current.release = release;\n        current.value = value;\n        current.callback = done || noop;\n        current.errorHandler = errorHandler;\n        if (_running === self.concurrency || self.paused) {\n            if (queueTail) {\n                queueTail.next = current;\n                queueTail = current;\n            } else {\n                queueHead = current;\n                queueTail = current;\n                self.saturated();\n            }\n        } else {\n            _running++;\n            worker.call(context, current.value, current.worked);\n        }\n    }\n    function unshift(value, done) {\n        var current = cache.get();\n        current.context = context;\n        current.release = release;\n        current.value = value;\n        current.callback = done || noop;\n        current.errorHandler = errorHandler;\n        if (_running === self.concurrency || self.paused) {\n            if (queueHead) {\n                current.next = queueHead;\n                queueHead = current;\n            } else {\n                queueHead = current;\n                queueTail = current;\n                self.saturated();\n            }\n        } else {\n            _running++;\n            worker.call(context, current.value, current.worked);\n        }\n    }\n    function release(holder) {\n        if (holder) {\n            cache.release(holder);\n        }\n        var next = queueHead;\n        if (next) {\n            if (!self.paused) {\n                if (queueTail === queueHead) {\n                    queueTail = null;\n                }\n                queueHead = next.next;\n                next.next = null;\n                worker.call(context, next.value, next.worked);\n                if (queueTail === null) {\n                    self.empty();\n                }\n            } else {\n                _running--;\n            }\n        } else if (--_running === 0) {\n            self.drain();\n        }\n    }\n    function kill() {\n        queueHead = null;\n        queueTail = null;\n        self.drain = noop;\n    }\n    function killAndDrain() {\n        queueHead = null;\n        queueTail = null;\n        self.drain();\n        self.drain = noop;\n    }\n    function error(handler) {\n        errorHandler = handler;\n    }\n}\nfunction noop() {}\nfunction Task() {\n    this.value = null;\n    this.callback = noop;\n    this.next = null;\n    this.release = noop;\n    this.context = null;\n    this.errorHandler = null;\n    var self = this;\n    this.worked = function worked(err, result) {\n        var callback = self.callback;\n        var errorHandler = self.errorHandler;\n        var val = self.value;\n        self.value = null;\n        self.callback = noop;\n        if (self.errorHandler) {\n            errorHandler(err, val);\n        }\n        callback.call(self.context, err, result);\n        self.release(self);\n    };\n}\nfunction queueAsPromised(context, worker, concurrency) {\n    if (typeof context === \"function\") {\n        concurrency = worker;\n        worker = context;\n        context = null;\n    }\n    function asyncWrapper(arg, cb) {\n        worker.call(this, arg).then(function(res) {\n            cb(null, res);\n        }, cb);\n    }\n    var queue = fastqueue(context, asyncWrapper, concurrency);\n    var pushCb = queue.push;\n    var unshiftCb = queue.unshift;\n    queue.push = push;\n    queue.unshift = unshift;\n    queue.drained = drained;\n    return queue;\n    function push(value) {\n        var p = new Promise(function(resolve, reject) {\n            pushCb(value, function(err, result) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(result);\n            });\n        });\n        // Let's fork the promise chain to\n        // make the error bubble up to the user but\n        // not lead to a unhandledRejection\n        p.catch(noop);\n        return p;\n    }\n    function unshift(value) {\n        var p = new Promise(function(resolve, reject) {\n            unshiftCb(value, function(err, result) {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                resolve(result);\n            });\n        });\n        // Let's fork the promise chain to\n        // make the error bubble up to the user but\n        // not lead to a unhandledRejection\n        p.catch(noop);\n        return p;\n    }\n    function drained() {\n        if (queue.idle()) {\n            return new Promise(function(resolve) {\n                resolve();\n            });\n        }\n        var previousDrain = queue.drain;\n        var p = new Promise(function(resolve) {\n            queue.drain = function() {\n                previousDrain();\n                resolve();\n            };\n        });\n        return p;\n    }\n}\nmodule.exports = fastqueue;\nmodule.exports.promise = queueAsPromised;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/fastq/queue.js\n");

/***/ })

};
;